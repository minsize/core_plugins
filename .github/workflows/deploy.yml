name: Node.js Packages

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        package:
          - utils

    steps:
      # Клонируем репозиторий для получения кода
      - name: Checkout repository
        uses: actions/checkout@v4

      # Устанавливаем Node.js нужной версии и указываем реестр npm
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22" # Версия Node.js, необходимая для вашего проекта
          registry-url: "https://registry.npmjs.org" # Указываем реестр пакетов npm

      # Install dependencies
      - name: Install Dependencies
        working-directory: ${{ matrix.package }}
        run: yarn

      - name: Fetch all tags
        run: git fetch --tags

      # Проверяем, изменилась ли версия пакета
      - name: Check the version
        working-directory: ${{ matrix.package }}
        id: check
        run: |
          echo "Checking version for package: ${{ matrix.package }}"
          CURRENT_VERSION=$(jq -r .version package.json) # Извлекаем текущую версию из package.json
          echo "Current version of ${{ matrix.package }}: $CURRENT_VERSION"

          # Получаем последнюю метку, относящуюся к конкретному пакету
          LATEST_TAG=$(git tag --list "${{ matrix.package }}-v*" --sort=-v:refname | head -n 1)
          echo "Latest tag: $LATEST_TAG"

          # Извлекаем номер версии из тега в формате <package>-v<version>
          LATEST_VERSION=${LATEST_TAG#${{ matrix.package }}-v}
          echo "Latest version for ${{ matrix.package }}: $LATEST_VERSION"

          if [ "$LATEST_VERSION" != "$CURRENT_VERSION" ]; 
          then
            echo "Version changed"
            echo "version_changed=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version not changed"
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      # Build package
      - name: Build
        working-directory: ${{ matrix.package }}
        if: steps.check.outputs.version_changed == 'true' # Условие на проверку изменения версии
        run: yarn build

      # Publish to npm
      - name: Publish to npm
        if: steps.check.outputs.version_changed == 'true' # Условие на проверку изменения версии
        working-directory: ${{ matrix.package }}/dist
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --access public --no-git-checks

      # Добавление тега релиза, если версия изменилась
      - name: Tag release
        if: steps.check.outputs.version_changed == 'true'
        run: |
          echo "Tagging release for package: ${{ matrix.package }}"
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "${{ matrix.package }}-v${{ steps.check.outputs.new_version }}" -m "${{ matrix.package }}-v${{ steps.check.outputs.new_version }}"
          git push origin "${{ matrix.package }}-v${{ steps.check.outputs.new_version }}"
